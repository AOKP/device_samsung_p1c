<?xml version="1.0" encoding="utf-8"?>
<!--
/*
** Copyright 2009, The Android Open Source Project
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
*/
-->

<!-- These resources are around just to allow their values to be customized
     for different hardware and product builds. -->
<resources>
    <!-- Flag indicating whether we should enable the automatic brightness in Settings.
         config_hardware_automatic_brightness_available is not set, so we will use software implementation -->
    <bool name="config_automatic_brightness_available">false</bool>

    <!-- There is no charging LED. -->
    <bool name="config_unplugTurnsOnScreen">true</bool>

    <!-- Our amoled doesn't animate well. -->
    <bool name="config_animateScreenLights">false</bool>

    <!-- disable menu hard key on Crespo in non-pattern lockscreen -->
    <bool name="config_disableMenuKeyInLockScreen">true</bool>

    <!-- Array of light sensor LUX values to define our levels for auto backlight brightness support.
         The N entries of this array define N + 1 zones as follows:

         Zone 0:        0 <= LUX < array[0]
         Zone 1:        array[0] <= LUX < array[1]
         ...
         Zone N:        array[N - 1] <= LUX < array[N]
         Zone N + 1:    array[N] <= LUX < infinity

         Must be overridden in platform specific overlays -->
<!--    <integer-array name="config_autoBrightnessLevels">
        <item>10</item>
        <item>160</item>
        <item>225</item>
        <item>320</item>
        <item>640</item>
        <item>1280</item>
        <item>2600</item>
        <item>10240</item>
    </integer-array> -->

    <!-- Array of output values for LCD backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
    -->
<!--    <integer-array name="config_autoBrightnessLcdBacklightValues">
        <item>20</item>
        <item>20</item>
        <item>20</item>
        <item>20</item>
        <item>35</item>
        <item>50</item>
        <item>50</item>
        <item>100</item>
        <item>255</item>
    </integer-array> -->

    <!-- Array of output values for button backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
    -->
<!--    <integer-array name="config_autoBrightnessButtonBacklightValues">
        <item>255</item>
        <item>255</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
    </integer-array> -->

    <!-- Array of output values for keyboard backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         Crespo has no keyboard so all values are zero.
    -->
<!--    <integer-array name="config_autoBrightnessKeyboardBacklightValues">
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
    </integer-array> -->
    
    <!-- Component name of the default wallpaper. This will be ImageWallpaper if not 
         specified -->
    <string name="default_wallpaper_component">com.android.wallpaper/.nexus.NexusWallpaper</string>

    <integer name="config_deskDockKeepsScreenOn">0</integer>
    <integer name="config_carDockKeepsScreenOn">1</integer>

    <!-- Default color for notification LED is white -->
    <color name="config_defaultNotificationColor">#ffffffff</color>

    <!-- Default blink frequency for notification LED is 9 seconds. -->
    <integer name="config_defaultNotificationLedOff">9000</integer>

    <!-- Component name of the service providing network location support. -->
    <string name="config_networkLocationProvider">com.google.android.location.NetworkLocationProvider</string>

    <!-- Component name of the service providing geocoder API support. -->
    <string name="config_geocodeProvider">com.google.android.location.GeocodeProvider</string>


    <!-- XXXXX NOTE THE FOLLOWING RESOURCES USE THE WRONG NAMING CONVENTION.
         Please don't copy them, copy anything else. -->

    <!-- This string array should be overridden by the device to present a list of network
         attributes.  This is used by the connectivity manager to decide which networks can coexist
         based on the hardware -->
    <!-- An Array of "[Connection name],[ConnectivityManager connection type],
         [associated radio-type],[priority]  -->
    <string-array translatable="false" name="networkAttributes">
        <item>"wifi,1,1,1"</item>
        <item>"mobile,0,0,0"</item>
        <item>"mobile_mms,2,0,2"</item>
        <item>"mobile_supl,3,0,2"</item>
        <item>"mobile_dun,4,0,4"</item>
        <item>"mobile_hipri,5,0,3"</item>
    </string-array>

    <!-- List of regexpressions describing the interface (if any) that represent tetherable
         USB interfaces.  If the device doesn't want to support tething over USB this should
         be empty.  An example would be "usb.*" -->
    <string-array translatable="false" name="config_tether_usb_regexs">
        <item>"usb0"</item>
    </string-array>

    <!-- Regex array of allowable upstream ifaces for tethering - for example if you want
         tethering on a new interface called "foo2" add <item>"foo\\d"</item> to the array -->
    <string-array translatable="false" name="config_tether_upstream_regexs">
        <item>"ppp\\d"</item>
        <item>"eth\\d"</item>
    </string-array>

    <!-- List of regexpressions describing the interface (if any) that represent tetherable
         Wifi interfaces.  If the device doesn't want to support tethering over Wifi this
         should be empty.  An example would be "softap.*" -->
    <string-array translatable="false" name="config_tether_wifi_regexs">
        <item>"wl0.1"</item>
    </string-array>


    <!-- Boolean indicating if we require the use of DUN on mobile for tethering -->
    <bool translatable="false" name="config_tether_dun_required">false</bool>

    <!-- Vibrator pattern for a very short but reliable vibration for soft keyboard tap -->
    <integer-array name="config_keyboardTapVibePattern">
        <item>30</item>
    </integer-array>

    <!-- Vibrator pattern for feedback about booting with safe mode disabled -->
    <integer-array name="config_safeModeDisabledVibePattern">
        <item>1</item>
    </integer-array>

    <!-- crespo doesn't handle this blur effect very quickly. -->
    <bool name="config_sf_slowBlur">true</bool>


    <!-- Boolean indicating if restoring network selection should be skipped -->
    <!-- The restoring is handled by modem if it is true -->
    <bool translatable="false" name="skip_restoring_network_selection">true</bool>

    <!-- The number of degrees to rotate the display when the device is in a desk dock.
         A value of -1 means no change in orientation by default. -->
    <integer name="config_deskDockRotation">90</integer>

    <!-- The number of degrees to rotate the display when the device is in a car dock.
         A value of -1 means no change in orientation by default. -->
    <integer name="config_carDockRotation">-1</integer>

    <!-- Control whether being in the desk dock (and powered) always
         keeps the screen on.  By default it stays on when plugged in to
         AC.  0 will not keep it on; or together 1 to stay on when plugged
         in to AC and 2 to stay on when plugged in to USB.  (So 3 for both.) -->
    <integer name="config_deskDockKeepsScreenOn">0</integer>

    <!-- Control whether being in the car dock (and powered) always
         keeps the screen on.  By default it stays on when plugged in to
         AC.  0 will not keep it on; or together 1 to stay on when plugged
         in to AC and 2 to stay on when plugged in to USB.  (So 3 for both.) -->
    <integer name="config_carDockKeepsScreenOn">1</integer>

    <!-- Control whether being in the desk dock should enable accelerometer
         based screen orientation.  Note this should probably default to true
         like car dock, but we haven't had a chance to test it. -->
    <bool name="config_deskDockEnablesAccelerometer">false</bool>

    <!-- Control whether being in the car dock should enable accelerometer based
         screen orientation.  This defaults to true because putting a device in
         a car dock make the accelerometer more a physical input (like a lid). -->
    <bool name="config_carDockEnablesAccelerometer">true</bool>

    <!-- Indicate whether the SD card is accessible without removing the battery. -->
    <bool name="config_batterySdCardAccessibility">true</bool>

    <!-- ************************************************
         *                                              *
         *    GLOBAL DEFAULT VALUES FOR CM SETTINGS     *
         *                                              *
         ************************************************

         if you wanna change a behavior for your device,
         just copy that value to your overlay file and
         set it as you like -->

    <!-- these values should be default for all phone devices! -->

    <!-- toggles weather device is tablet or phone. right now,
    tablets are know to have soft buttons, but phones have harware
    buttons. this might change in the future - especially when the
    honeycomb modifications become available for phones -->
    <bool name="cm_default_is_tablet">true</bool>

    <!-- toggles weather device uses soft buttons or got hardware
    buttons. as the time of writing for android 2.3.3. all soft button
    enabled devices are tablets, all disabled are phones. -->
    <bool name="cm_default_has_soft_buttons">true</bool>

    <!-- if true, status bar is shown on bottom by default -->
    <bool name="cm_default_bottom_status_bar">true</bool>
    <!-- if true, dead zone is activated, which disables pull
    out of the status bar on the middle area - i.e. for people
    who start drag-out events accidently while trying to hit
    the space key -->
    <bool name="cm_default_use_dead_zone">false</bool>
    <!-- if true, soft buttons shown on left, false show them on
    right side of status bar -->
    <bool name="cm_default_soft_buttons_left">true</bool>

    <!-- toggle which buttons to show if soft buttons enabled
    quickna: opens notification area with the press of one button
    instead of swiping the long way up/down on big tablets -->
    <bool name="cm_default_show_soft_home">true</bool>
    <bool name="cm_default_show_soft_menu">true</bool>
    <bool name="cm_default_show_soft_back">true</bool>
    <bool name="cm_default_show_soft_search">false</bool>
    <bool name="cm_default_show_soft_quick_na">true</bool>

    <!-- disables display of lockscreen both on boot as on
    power button press to wake devices. usful for devices you
    dont carry in pockets -->
    <bool name="cm_default_disable_lockscreen">false</bool>
    <!--  option only available for devices with soft buttons.
    when enabled, fullscreen apps show the status bar. status
    bar then gets an adition hide button to switch to real
    fullscreen  -->
    <bool name="cm_default_disable_fullscreen">true</bool>

    <!-- toggles which button to use to unhide the status bar
    to show soft buttons again (see last comment). this is an
    index. to know, which index matches which button, see
    arrays.xml of CMParts. at the bottom of this file, menu
    entries like "menu, back, home" are mapped to indexes -->
    <integer name="cm_default_unhide_button_index">0</integer>

    <!-- when enabled, the power menu (shown when long-pressing
    power... includes reboot and power off) is extended by
    some more options which reflect the soft keys. ignored if soft
    keys are disabled -->
    <bool name="cm_default_extend_power_menu">true</bool>

    <!--  toggles which buttons to show on extended power menu.
    ignored if power menu disabled -->
    <bool name="cm_default_power_menu_home">true</bool>
    <bool name="cm_default_power_menu_menu">true</bool>
    <bool name="cm_default_power_menu_back">true</bool>

    <!--  toggles behavior of volume buttons. default (false) triggers
    volume change when pressing, user action when long-pressing. enabling
    (true) this option reverses this behavior -->
    <bool name="cm_default_reverse_volume_behavior">false</bool>
    <!-- defines the action of the volume buttons. for volume up,
    volume down, both press and both long-press. this is an
    index. to know, which index matches which button, see
    arrays.xml of CMParts. at the bottom of that file, menu
    entries like "menu, back, home" are mapped to indexes -->
    <integer name="cm_default_remapped_long_vol_up_index">0</integer>
    <integer name="cm_default_remapped_long_vol_down_index">0</integer>
    <integer name="cm_default_remapped_both_vol_index">0</integer>
    <integer name="cm_default_remapped_long_both_vol_index">0</integer>

</resources>
